package edu.uiowa.icts.safeseed.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import edu.uiowa.icts.spring.*;
import edu.uiowa.icts.safeseed.SequenceParser;
import edu.uiowa.icts.safeseed.domain.*;
import edu.uiowa.icts.safeseed.dao.*;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

/* Generated by Protogen
 *
 *
 */

@Controller
@RequestMapping("/safeseed/seq/*")
public class SeqController extends AbstractSafeseedController {


	private static final Log log =LogFactory.getLog(SeqController.class);

	@RequestMapping(value = "list.html", method = RequestMethod.GET)
	public ModelAndView list()
	{
		log.debug("in list method for Seq");
		ModelMap model = new ModelMap();
		model.addAttribute("seqList",safeseedDaoService.getSeqService().list());
		return new ModelAndView("/safeseed/seq/list",model);
	}

	@RequestMapping(value = "add.html", method = RequestMethod.GET)
	public ModelAndView add()
	{
		log.debug("in add method for Seq");
		ModelMap model = new ModelMap();
		Seq seq = new Seq();
		model.addAttribute("seq",seq);
		return new ModelAndView("/safeseed/seq/add",model);
	}

	@RequestMapping(value = "edit.html", method = RequestMethod.GET)
	public ModelAndView edit(@RequestParam("seqId") Integer seqId)
	{
		log.debug("in edit method for Seq");
		ModelMap model = new ModelMap();
		Seq seq = safeseedDaoService.getSeqService().findById(seqId);
		model.addAttribute("seq",seq);
		return new ModelAndView("/safeseed/seq/edit",model);
	}

	@RequestMapping(value = "show.html", method = RequestMethod.GET)
	public ModelAndView show(@RequestParam("seqId") Integer seqId)
	{
		log.debug("in show method for Seq");
		ModelMap model = new ModelMap();
		Seq seq = safeseedDaoService.getSeqService().findById(seqId);
		model.addAttribute("seq",seq);
		return new ModelAndView("/safeseed/seq/show",model);
	}


	@RequestMapping(value = "showSequence.html", method = RequestMethod.GET)
	public void showSequence(
			@RequestParam("seqId") Integer seqId,
			HttpServletResponse res
	) throws IOException 
	{
		log.debug("in showSequence");

		Seq seq = safeseedDaoService.getSeqService().findById(seqId);
		PrintWriter out = res.getWriter();

			
		//BufferedReader br = new BufferedReader(new StringReader());
			
		out.println(seq.getSequence());
			
		out.close();


	}
	

	@RequestMapping(value = "showSeqDetails.html", method = RequestMethod.GET)
	public ModelAndView showSeqDetail(@RequestParam("seqId") Integer seqId)
	{
		Person user = safeseedDaoService.getPersonService().findByUsername(getUsername());
		log.debug("in showSeqDetails.html method for Seq");
		ModelMap model = new ModelMap();
		CollectionId colId = new CollectionId();
		colId.setPersonId(user.getPersonId());
		colId.setSeqId(seqId);
		Collection col = safeseedDaoService.getCollectionService().findById(colId);
		Set<Integer> notProcessedSet = new HashSet<Integer>();
		
		for(int i = 19;i<31;i++)
		{
			notProcessedSet.add(i);
		}
		
		Set<SeqFrag> sfSet = col.getSeq().getSeqFrags();
		for(SeqFrag s: sfSet)
		{
			notProcessedSet.remove(s.getFragLength());
			
		}
		
		model.addAttribute("notProcessed",notProcessedSet);
		
		model.addAttribute("col",col);
		return new ModelAndView("bodyOnlyTemplate|/safeseed/seq/showSeqDetails_partial",model);
	}
	
	@RequestMapping(value = "selectSeqLength.html", method = RequestMethod.GET)
	public ModelAndView selectSeqLength(@RequestParam("seqId") Integer seqId)
	{
		Person user = safeseedDaoService.getPersonService().findByUsername(getUsername());
		log.debug("in selectSeqLength method for Seq");
		ModelMap model = new ModelMap();
		CollectionId colId = new CollectionId();
		colId.setPersonId(user.getPersonId());
		colId.setSeqId(seqId);
		Collection col = safeseedDaoService.getCollectionService().findById(colId);
		
		model.addAttribute("col",col);
		return new ModelAndView("bodyOnlyTemplate|/safeseed/seq/selectSeqLength_partial",model);
	}
	
	@RequestMapping(value = "loadViewList.html", method = RequestMethod.GET)
	public ModelAndView loadViewList(@RequestParam("seqLengths") String seqLengths,ModelMap model)
	{
		Person user = safeseedDaoService.getPersonService().findByUsername(getUsername());
		log.debug("in loadViewList");
		if(seqLengths==null|| "".equals(seqLengths))
			return new ModelAndView("bodyOnlyTemplate|/safeseed/seq/loadViewList_partial",model);
		//Person user = safeseedDaoService.getPersonService().findByUsername(getUsername());
		HashMap<Integer,String> seqNamesMap = new HashMap<Integer,String>();
		List<SeqFrag> sfList = new ArrayList<SeqFrag>();
		for(String temp: seqLengths.split(","))
		{
			int id = Integer.parseInt(temp);
			SeqFrag sf = safeseedDaoService.getSeqFragService().findById(id);
			if(sf!=null)
			{
				CollectionId cid = new CollectionId();
				cid.setPersonId(user.getPersonId());
				cid.setSeqId(sf.getSeq().getSeqId());
				Collection col = safeseedDaoService.getCollectionService().findById(cid);
				if(col!=null)
				{
					seqNamesMap.put(sf.getSeq().getSeqId(),col.getName());
				}
				
				sfList.add(sf);
			}
			
		}
		log.debug("size of sfList:"+sfList.size());
		model.addAttribute("seqNamesMap",seqNamesMap);
		model.addAttribute("sfList",sfList);
		return new ModelAndView("bodyOnlyTemplate|/safeseed/seq/loadViewList_partial",model);
	}

	@RequestMapping(value = "save.html", method = RequestMethod.POST)
	public String save(@ModelAttribute("seq") Seq seq)
	{
		log.debug("in save method for Seq");
		safeseedDaoService.getSeqService().saveOrUpdate(seq);
		return "redirect:/safeseed/seq/list.html";
	}



	@RequestMapping(value = "savePasted.html", method = RequestMethod.POST)
	public ModelAndView savePasted(@RequestParam("seqTextPaste") String seqTextPaste, ModelMap model)
	{

		Person user = safeseedDaoService.getPersonService().findByUsername(getUsername());

		log.debug("In savePasted.html controller method");
		SequenceParser seqParser = new SequenceParser();
		try {
			LinkedHashMap<String,Seq> seqMap = seqParser.getSequenceListFromString(seqTextPaste);


			//TODO see if sequence exists
			for(Seq s:seqMap.values())
			{
				if(user!=null)
				{
					log.debug("user:"+user.getUsername());
					s.setPerson(user);
					s.setDateAdded(new Date());
					safeseedDaoService.getSeqService().save(s);
					CollectionId colId = new CollectionId();
					colId.setPersonId(user.getPersonId());
					colId.setSeqId(s.getSeqId());
					Collection col =  new Collection();
					col.setId(colId);
					col.setDateAdded(new Date());
					col.setName(s.getName());
					col.setNotes(s.getDescription());
					safeseedDaoService.getCollectionService().save(col);
					
				}
				else
				{
					log.debug("no user");
				}

			}

			log.debug("sequence count:"+seqMap.size());			
			model.addAttribute("seqList", seqMap.values());

			return new ModelAndView("/safeseed/seq/add_details",model);

		} catch (IOException e) {
			// TODO Auto-generated catch block

			log.error("Error: Cannot parse sequence input");
			e.printStackTrace();
		}


		//TODO send to error page
		return new ModelAndView("redirect:/safeseed/seq/list.html",model);
	}
	
	
	@RequestMapping(value = "saveFile.html", method = RequestMethod.POST)
	public ModelAndView saveFile(HttpServletRequest req, ModelMap model) throws IOException
	{

		Person user = safeseedDaoService.getPersonService().findByUsername(getUsername());

		String seqText ="";
		log.debug("In saveFile.html controller method");
		
	
			MultipartHttpServletRequest mreq = (MultipartHttpServletRequest)req;
			MultipartFile file = mreq.getFile("seq_file");
			
			if(file != null)
			{
				log.debug("File found...using");
				seqText = new String(file.getBytes());
			}
			


		
		
		SequenceParser seqParser = new SequenceParser();
		try {
			LinkedHashMap<String,Seq> seqMap = seqParser.getSequenceListFromString(seqText);


			//TODO see if sequence exists
			for(Seq s:seqMap.values())
			{
				if(user!=null)
				{
					log.debug("user:"+user.getUsername());
					s.setPerson(user);
					s.setDateAdded(new Date());
					safeseedDaoService.getSeqService().save(s);
					CollectionId colId = new CollectionId();
					colId.setPersonId(user.getPersonId());
					colId.setSeqId(s.getSeqId());
					Collection col =  new Collection();
					col.setId(colId);
					col.setDateAdded(new Date());
					col.setName(s.getName());
					col.setNotes(s.getDescription());
					safeseedDaoService.getCollectionService().save(col);
					
				}
				else
				{
					log.debug("no user");
				}

			}

			log.debug("sequence count:"+seqMap.size());			
			model.addAttribute("seqList", seqMap.values());

			return new ModelAndView("/safeseed/seq/add_details",model);

		} catch (IOException e) {
			// TODO Auto-generated catch block

			log.error("Error: Cannot parse sequence input");
			e.printStackTrace();
		}


		//TODO send to error page
		return new ModelAndView("redirect:/safeseed/seq/list.html",model);
	}

	@RequestMapping(value = "updateSequenceDetails.html", method = RequestMethod.POST)
	public ModelAndView updateSequenceDetails(HttpServletRequest req, ModelMap model)
	{

		//TODO
		Person user = safeseedDaoService.getPersonService().findByUsername(getUsername());



		if(user==null)
		{
			log.debug("Not logged in");
			//TODO no such user....need to error out
		}
		log.debug("In updateSequenceDetails.html controller method");
		/*
		 * The parameter values have a composite key in the form attribute_seqId
		 * Here we break up the key and get the values
		 */
		HashMap<Integer, Seq> seqMap = new HashMap<Integer,Seq>();
		
		for( Object keyOb:req.getParameterMap().keySet())
		{
		
			String key = (String)keyOb;
			String value = req.getParameter(""+key);
			log.debug("Key:"+key);
			String[] paramArray = key.split("_");
			String attrib = paramArray[0];
			Integer seqId = Integer.parseInt(paramArray[1]);
			
			
			
			log.debug("seqid="+seqId +"  attrib="+attrib+"  value="+value);
			/*
			 * Load seq into hashmap if not already, else get from hashmap
			 */
			Seq seq = null;
			if(seqMap.containsKey(seqId)==false)
			{
				seq = safeseedDaoService.getSeqService().findById(seqId);
				if(seq==null)
				{
					log.debug("Error, sequence does not exist");
					continue;
				}
				seqMap.put(seqId, seq);
			}
			else
			{
				seq = seqMap.get(seqId);
			}
			
			
			
			//safeseedDaoService.getSeqService().refresh(seq);
		
			
			CollectionId colId = new CollectionId();
			colId.setPersonId(user.getPersonId());
			colId.setSeqId(seqId);
			Collection col = safeseedDaoService.getCollectionService().findById(colId);
			


			if("length".equals(attrib))
			{
				
				SeqFrag seqFrag = new SeqFrag();
				seqFrag.setCompleted(false);
				seqFrag.setFragLength(Integer.parseInt(value));
				seqFrag.setSeq(seq);
				safeseedDaoService.getSeqFragService().save(seqFrag);
			
				Submission submission = new Submission();
				submission.setDateRequested(new Date());
				submission.setSeqFrag(seqFrag);
				submission.setSeq(seq);
				submission.setPerson(user);
				safeseedDaoService.getSubmissionService().save(submission);

				//add to processing queue
				Queue q = new Queue();
				q.setComplete(false);
				q.setSeqFrag(seqFrag);
				q.setPriorityLevel(6);
				safeseedDaoService.getQueueService().save(q);
			

			}
			else if("name".equals(attrib))
			{

				seq.setName(value);
				col.setName(value);
				safeseedDaoService.getCollectionService().saveOrUpdate(col);
			}
			else if("species".equals(attrib))
			{

				seq.setSpecies(value);
				
				
			}
			else if("description".equals(attrib))
			{

				seq.setDescription(value);
				col.setNotes(value);
				safeseedDaoService.getCollectionService().saveOrUpdate(col);
			}






		}
		
		//save all sequences in hashmap
		log.debug("Saving seq changes");
		for(Seq s: seqMap.values())
		{
			safeseedDaoService.getSeqService().save(s);
		}

		//TODO send to error page
		return new ModelAndView("redirect:/safeseed/seq/collection.html",model);
	}
	
	


	@RequestMapping(value = "processRequest.html", method = RequestMethod.GET)
	public ModelAndView processRequest(
			@RequestParam(value="seqId") Integer seqId,
			@RequestParam(value="length") Integer length
			)
	{
		log.debug("in processRequest.html method for Seq");

		Person user  = safeseedDaoService.getPersonService().findByUsername(getUsername());

		
		Seq seq = safeseedDaoService.getSeqService().findById(seqId);
			
				
		SeqFrag seqFrag = new SeqFrag();
		seqFrag.setCompleted(false);
		seqFrag.setFragLength(length);
		seqFrag.setSeq(seq);
		safeseedDaoService.getSeqFragService().save(seqFrag);
	
		Submission submission = new Submission();
		submission.setDateRequested(new Date());
		submission.setSeqFrag(seqFrag);
		submission.setSeq(seq);
		submission.setPerson(user);
		safeseedDaoService.getSubmissionService().save(submission);

		//add to processing queue
		Queue q = new Queue();
		q.setComplete(false);
		q.setSeqFrag(seqFrag);
		q.setPriorityLevel(6);
		safeseedDaoService.getQueueService().save(q);

		return new ModelAndView("redirect:/safeseed/seq/collection.html");
	}

	@RequestMapping(value = "submissions.html", method = RequestMethod.GET)
	public ModelAndView submissions(@RequestParam(value="debug",required=false) Boolean debug)
	{
		log.debug("in submission method for Seq");

		Person user  = safeseedDaoService.getPersonService().findByUsername(getUsername());

		ModelMap model = new ModelMap();
		model.addAttribute("debug",debug);
		model.addAttribute("submissionList",user.getSubmissions());
		return new ModelAndView("/safeseed/seq/submissions",model);
	}


	@RequestMapping(value = "collection.html", method = RequestMethod.GET)
	public ModelAndView collection(@RequestParam(value="debug",required=false) Boolean debug)
	{
		log.debug("in collection method for Seq");

		Person user  = safeseedDaoService.getPersonService().findByUsername(getUsername());
		if(user==null)
		{
			log.debug("user not logged in");
			return new ModelAndView("redirect:/index.html");
			
		}

		ModelMap model = new ModelMap();
		model.addAttribute("debug",debug);
		
		model.addAttribute("collection",user.getCollections());
		return new ModelAndView("/safeseed/seq/collection",model);
	}

	@RequestMapping(value = "delete.html", method = RequestMethod.GET)
	public String delete(@RequestParam("seqId") Integer seqId)
	{
		log.debug("in delete method for Seq");
		Seq seq = safeseedDaoService.getSeqService().findById(seqId);
		safeseedDaoService.getSeqService().delete(seq);
		return "redirect:/safeseed/seq/list.html";
	}
	
}
